#!/bin/bash

#*********************************************************************#
#       AUTHOR: SRIHARSHA VOGETI				      #
#	EMAIL: vogetisri.harsha@research.iiit.ac.in                   #
#   	SOURCE:                                                       #
#   	DESCRIPTION: pCNVD PIPELINE SCRIPT                            #
#   	LAST UPDATED: 18/06/16                                        #
#*********************************************************************#

shopt -s extglob
#set -e 
start_time=`date +%s`


#PARAMETERS WITH DEFAULT VALUES
no_of_procs=32;		# number of processes
input_file="";		# INPUT FILE NAME && MANDATORY PARAMETER
mappability_file=""; 	# MAPPABILITY FILE NAME && MANDATORY PARAMETER
window_file=""; 	# BED FILE CONTAINING WINDOWS && required
output="";      	# OUTPUT PREFIX && MANDATORY PARAMETER
mapThres=0.5;		# mappability threshold

# Flags used
YOONGCFLAG=0;		# flag for yoon et al method (GC-correction)
YOONMAPFLAG=0;		# flag for yoon et al method (Mappability correction)
LOESSGCFLAG=0;		# flag for loess GC correction method
gcFlag=0;


# constants to be used 
SOURCEDIR=$(dirname $(readlink -f $0)); # SOURCE DIRECTORY 
randomString=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)


# function to correct gc-bias corrected read depths using Yoon et al method 
# uses external R script 
function runYoonGCcorrection() {
	awk '{print $1}' $1 > $1"_GC"
	paste $1"_GC" $2 > $output"_GC"
	Rscript --slave $SOURCEDIR"/source/R/gcCorrectionYoon.R" $output"_GC" > $1"_GC";
	awk '{print $2,$3,$4,$5}' $1 | paste $1"_GC" - >$output"_GC"
	mv $output"_GC" $1
	rm $1"_GC";
}

# function calls an external script loessGCCorrection.R
# does gc correction using loess method
function runLoessGCcorrection() {
	awk '{print $1}' $1 > $1"_GC"
	Rscript --slave $SOURCEDIR"/source/R/loessGCCorrection.R" $1"_GC" $2
	awk '{print $2,$3,$4,$5}' $1 | paste $1"_GC" - >$output"_GC"
	mv $output"_GC" $1
	rm $1"_GC";
}


# Function to correct mappability using Yoon et al method
# Similar to above function
# Instead of GC score , mappability score is passed. 
function runYoonMapCorrection(){
	
	awk '{print $1,$3}' $1 > $randomString"_map_rawRead.input"
	Rscript --slave $SOURCEDIR"/source/R/gcCorrectionYoon.R" $randomString"_map_rawRead.input" > $randomString"_map_rawRead.output";
	awk '{print $2,$3,$4,$5}' $1 | paste $randomString"_map_rawRead.output" - >$randomString"_temp.txt"
	mv $randomString"_temp.txt" $1
	rm -rf $randomString"_map_rawRead.input" $randomString"_map_rawRead.output"

}

#***************************************#
#	READ OPTIONS FROM CMD 		#
#	AND SET PARAMETERS		#
#***************************************#

SHORTOPTS="ybp:i:o:m:z:"
LONGOPTS="gcfile:,mapThres:,help,yoonGC,yoonMap,loessGC"
PROGNAME="preprocess.sh"
ARGS=$(getopt -s bash --options $SHORTOPTS  --longoptions $LONGOPTS --name $PROGNAME -- "$@" ) 

eval set -- "$ARGS"
while true; do
	case "$1" in 
	-p) no_of_procs="$2"; shift 2 ;;
	-i) input_file="$2"; shift 2;;
	-o) output="$2"; shift 2;;
	-m) mappability_file="$2"; shift 2;;
	-z) window_file="$2"; shift 2;;
	-y) YOONGCFLAG=1; YOONMAPFLAG=1; shift ;;
	--gcfile) gcFile="$2"; gcFlag=1; shift 2; ;;
	--help) echo "Usage: preprocess -i <input BAM> -o <output Prefix> -m <mappability file> -z <bin file>";
		exit 1; ;;
	--mapThres) mapThres="$2" ; shift 2; ;;
	--yoonGC) YOONGCFLAG=1; shift ;; 
	--yoonMap) YOONMAPFLAG=1; shift ;;
	--loessGC) LOESSGCFLAG=1; shift ;;
	--) shift; break;;
	*) echo "Error: Something wrong with the parameters"; 
	echo "Requred parameters: -i -o -m -z "; exit 1;;
	esac 
done



# MINIMUM REQUIRED PARAMETERS
if [[ -z "$input_file" || -z "$window_file" || -z "$mappability_file" || -z "$output" ]]; then
	echo "Missing one of the required parameters: window_file (-z) mappability_file (-m) input_file (-i) output (-o) " >&2
	exit 
fi

# FILE DOESNT EXIST ERROR
if [[ ! -f $window_file || ! -f $input_file || ! -f $mappability_file ]]; then 
	echo "One of the input files not found" >&2
	exit 1
fi
if [[ $YOONGCFLAG -eq 1 ]]; then 
	if [[ $gcFlag -eq 1 ]];then
		gcFlag=1;
	else
		echo "ERROR: -y flag requires --gcfile argument" >&2 ;
		exit 1
	fi
fi	

#***********************************************#
#	MAIN FUNCTION STARTS HERE		#
#	PRECPROCESS-SEGMENTATION-POSTPROCESS	#
#***********************************************#

# DATA PREPARATION AND FILTERING 
samtools view -@ 4 -q 1 -bh $input_file | bedtools bamtobed -i - > $output"_temp.bed";
#bedtools bamtobed -i $output"_temp1.bam" > $output"_temp.bed"

bedtools coverage -b $output"_temp.bed" -a $window_file > $output"_temp1.bed";
rm -rf $output"_temp.bed";

sort -n -k2 $output"_temp1.bed" -o $output"_temp1.bed";
paste $output"_temp1.bed" $mappability_file > $output"_temp2";
mv $output"_temp2" $output"_temp1.bed";
awk '{print $4,$5,$8,$2,$3}' $output"_temp1.bed"> $output"_temp1";


# check for gc correction, if yes correct 
# check whether to correct with Yoon method or Loess Method
if [[ $YOONGCFLAG -eq 1 ]]; then
	runYoonGCcorrection $output"_temp1" $gcFile;
elif [[ $LOESSGCFLAG -eq 1 ]]; then
	runLoessGCcorrection $output"_temp1" $gcFile
fi

# check for mappability correction, if yes correct it 
if [[ $YOONMAPFLAG -eq 1 ]]; then
	runYoonMapCorrection $output"_temp1"
fi


awk -v mapThres="$mapThres" '{if($1!=0&&$2!=0&&$3>=mapThres) print $1;}' $output"_temp1" > $output"_pCNVD.input";
awk -v mapThres="$mapThres" '{if($1!=0&&$2!=0&&$3>=mapThres)print $4,$5;}' $output"_temp1" > $output"_pCNVD.bincor"; 
rm -rf $output"_temp1.bed" $output"_temp1";


# check for gc correction flag and run external R script 
##############################################################################################


